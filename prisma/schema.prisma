// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User table
model User {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  // available values:
  // online, busy, offline
  availability String?

  email    String? @unique
  username String? @unique
  fname    String? @db.VarChar(255)
  lname    String? @db.VarChar(255)
  password String? @db.VarChar(255)
  avatar   String?

  admin Boolean? @default(false)

  Ucode      Ucode[]
  Problem    Problem[]
  Submission Submission[]
  RoleUser   RoleUser[]

  @@map("users")
}

// This Ucode table for storing temporary token/code for use of
// email verification, forgot password etc
model Ucode {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  status     Int?     @default(1)

  user_id Int?
  user    User? @relation(fields: [user_id], references: [id])

  token      String    @db.Text
  email      String
  expired_at DateTime?

  @@map("ucodes")
}

// Store list of Roles
model Role {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  title String?
  name  String?

  permission_roles PermissionRole[]
  role_users       RoleUser[]
  permissions      Permission[]

  @@map("roles")
}

// Store List of permissions
model Permission {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  title            String?
  action           String?
  subject          String?
  conditions       String?          @db.Text
  fields           String?          @db.Text
  permission_roles PermissionRole[]
  roles            Role[]

  @@map("permissions")
}

// permission and role relationship
model PermissionRole {
  // id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  permission_id Int
  permission    Permission? @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  role_id Int
  role    Role? @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([permission_id, role_id])
  @@map("permission_roles")
}

// role and user relationship
model RoleUser {
  // id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  role_id Int
  role    Role? @relation(fields: [role_id], references: [id], onDelete: Cascade)

  user_id Int
  user    User? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([role_id, user_id])
  @@map("role_users")
}

// just for example
// model Note {
//   id         Int       @id @default(autoincrement())
//   created_at DateTime  @default(now())
//   updated_at DateTime  @default(now())
//   deleted_at DateTime?
//   status     Int?      @default(1)

//   title String?
//   body  String? @db.Text

//   tenant_id Int?
//   tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

//   @@map("notes")
// }

// Store tags (e.x. stack, queue, graph, etc)
model Tag {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  name       String?
  slug       String?
  ProblemTag ProblemTag[]

  @@map("tags")
}

model ProblemTag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  problem    Problem? @relation(fields: [problem_id], references: [id], onDelete: Cascade)
  problem_id Int?

  tag    Tag? @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  tag_id Int?

  @@map("problem_tags")
}

// Store problem
model Problem {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  name String?
  slug String? @unique

  author_id Int?
  author    User? @relation(fields: [author_id], references: [id], onDelete: SetNull)

  statement   String?  @db.Text
  explanation String?  @db.Text
  constraint  String?  @db.Text
  time        Decimal?
  memory      Int?

  // format: [{input: "1 2", output: "3"}, {input: "2 3", output: "5"}}]
  sample_test_cases Json?
  system_test_cases Json?

  Submission Submission[]
  ProblemTag ProblemTag[]

  @@map("problems")
}

// Store submission
model Submission {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  code     String? @db.Text
  language String?
  verdict  String?
  time     Int?
  memory   Int?

  // format: [{input: "1 2", output: "3"}, {input: "2 3", output: "5"}}]
  result Json?

  problem_id Int?
  problem    Problem? @relation(fields: [problem_id], references: [id], onDelete: SetNull)

  user_id Int?
  user    User? @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@map("submissions")
}
